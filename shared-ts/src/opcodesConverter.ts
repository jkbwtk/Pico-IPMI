import fs, { writeFileSync } from 'fs';
import path from 'path';

const opcodesPath = '../shared/opcodes.py';
const outPath = './src/opcodes.ts';

const header =
`// Generated by ${path.basename(__filename)}.ts
// on ${new Date().toISOString()}\n\n`;

const opcodes: { [key: string]: number | string } = {};

const lines = fs.readFileSync(opcodesPath, 'utf-8').split('\n');

lines.forEach((line) => {
  const match = line.match(/(\w+)\s*=\s*(\d+|b'.+')\s*$/);
  if (!match) return;

  const code = match[2].match(/^(\d+)$/);
  const sequence = match[2].match(/^b'(.+)'$/);

  opcodes[match[1]] = code ? parseInt(code[1], 10) : (sequence ? sequence[1] : -1);
});

let out = header;

for (const [k, v] of Object.entries(opcodes)) {
  if (typeof v === 'number') {
    out += `export const ${k} = ${v};\n`;
  } else if (typeof v === 'string') {
    out += `export const ${k} = Buffer.from('${v}');\n`;
  } else {
    throw new Error(`Unknown type: ${typeof v} for ${k}`);
  }
}

out += '\n\n';
out += 'export enum Opcodes {\n';
for (const [k, v] of Object.entries(opcodes)) {
  if (typeof v === 'number') {
    out += `  ${k} = ${v},\n`;
  } else if (typeof v === 'string') {
    out += `  ${k} = '${v}',\n`;
  } else {
    throw new Error(`Unknown type: ${typeof v} for ${k}`);
  }
}
out += '}\n';

writeFileSync(outPath, out);
